# .github/.github/workflows/terraform-compliance.yml
name: Terraform Plan & Compliance Check

on:
  workflow_call:
    inputs:
      terraform_dir:
        description: 'Directory containing Terraform files'
        required: false
        type: string
        default: "."
      policies_repo:
        description: 'Repository containing OPA policies'
        required: false
        type: string
        default: "c-c-t/terraform-policies"
      policies_ref:
        description: 'Branch/tag of policies repo to use'
        required: false
        type: string
        default: "main"
      conftest_version:
        description: 'Conftest version to use'
        required: false
        type: string
        default: "0.49.1"
      terraform_version:
        description: 'Terraform version to use'
        required: false
        type: string
        default: "1.11.3"
      policy_namespaces:
        description: 'Comma-separated list of policy namespaces to test'
        required: false
        type: string
        default: "terraform.security,terraform.naming,terraform.best_practices"
      aws_role_arn:
        description: 'AWS IAM Role ARN for OIDC authentication'
        required: false
        type: string
      aws_account_id:
        description: 'AWS Account ID (if not provided, will attempt to detect from repository variables)'
        required: false
        type: string
      aws_region:
        description: 'AWS region for authentication and backend'
        required: false
        type: string
        default: "us-east-1"
      terraform_policies_token:
        description: 'Personal Access Token for accessing private terraform-policies repository'
        required: false
        type: string
    secrets:
      TERRAFORM_POLICIES_TOKEN:
        description: 'Personal Access Token for accessing private terraform-policies repository'
        required: false
  pull_request:
    branches:
      - main
      - develop
      - test
    paths:
      - '**/*.tf'
      - '**/*.tfvars'

permissions:
  id-token: write
  contents: read

jobs:
  terraform-compliance:
    name: Terraform Compliance Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Load Configuration and Set Defaults
        id: load-config
        run: |
          # Check if pipeline-config.json exists and read terraform directory from it
          if [ -f "pipeline-config.json" ]; then
            configJson=$(cat pipeline-config.json)
            terraform_dir_from_config=$(echo $configJson | jq -r '.workspace')
            echo "Found pipeline-config.json with workspace: $terraform_dir_from_config"
            echo "terraform_dir=${terraform_dir_from_config}" >> $GITHUB_OUTPUT
          else
            echo "No pipeline-config.json found, using input or default"
            echo "terraform_dir=${{ inputs.terraform_dir || '.' }}" >> $GITHUB_OUTPUT
          fi
          
          # Determine environment based on target branch
          target_branch="${{ github.event.pull_request.base.ref || github.ref_name }}"
          echo "Target branch: $target_branch"
          
          case "$target_branch" in
            "main"|"master")
              environment="prod"
              ;;
            "test")
              environment="test"
              ;;
            "develop"|"dev")
              environment="dev"
              ;;
            *)
              environment="dev"  # Default to dev for other branches
              ;;
          esac
          
          echo "Detected environment: $environment"
          echo "environment=$environment" >> $GITHUB_OUTPUT
          
          # Debug: Show available variables
          echo "Debug: Available AWS variables:"
          echo "AWS_ACCOUNT_ID_DEV = '${{ vars.AWS_ACCOUNT_ID_DEV }}'"
          echo "AWS_ACCOUNT_ID_TEST = '${{ vars.AWS_ACCOUNT_ID_TEST }}'"
          echo "AWS_ACCOUNT_ID_PROD = '${{ vars.AWS_ACCOUNT_ID_PROD }}'"
          echo "AWS_ACCOUNT_ID = '${{ vars.AWS_ACCOUNT_ID }}'"
          
          # Determine AWS Role ARN dynamically based on environment
          if [ -n "${{ inputs.aws_role_arn }}" ]; then
            echo "Using provided AWS role ARN: ${{ inputs.aws_role_arn }}"
            echo "aws_role_arn=${{ inputs.aws_role_arn }}" >> $GITHUB_OUTPUT
          elif [ -n "${{ inputs.aws_account_id }}" ]; then
            aws_role="arn:aws:iam::${{ inputs.aws_account_id }}:role/gha-oidc-role"
            echo "Building AWS role ARN from account ID input: $aws_role"
            echo "aws_role_arn=$aws_role" >> $GITHUB_OUTPUT
          else
            # Try environment-specific variables first, then fall back to generic
            case "$environment" in
              "prod")
                if [ -n "${{ vars.AWS_ACCOUNT_ID_PROD }}" ]; then
                  aws_role="arn:aws:iam::${{ vars.AWS_ACCOUNT_ID_PROD }}:role/gha-oidc-role"
                  echo "Using prod account ID from variable: $aws_role"
                elif [ -n "${{ vars.AWS_ACCOUNT_ID }}" ]; then
                  aws_role="arn:aws:iam::${{ vars.AWS_ACCOUNT_ID }}:role/gha-oidc-role"
                  echo "Using generic account ID for prod: $aws_role"
                fi
                ;;
              "test")
                if [ -n "${{ vars.AWS_ACCOUNT_ID_TEST }}" ]; then
                  aws_role="arn:aws:iam::${{ vars.AWS_ACCOUNT_ID_TEST }}:role/gha-oidc-role"
                  echo "Using test account ID from variable: $aws_role"
                elif [ -n "${{ vars.AWS_ACCOUNT_ID }}" ]; then
                  aws_role="arn:aws:iam::${{ vars.AWS_ACCOUNT_ID }}:role/gha-oidc-role"
                  echo "Using generic account ID for test: $aws_role"
                fi
                ;;
              "dev")
                if [ -n "${{ vars.AWS_ACCOUNT_ID_DEV }}" ]; then
                  aws_role="arn:aws:iam::${{ vars.AWS_ACCOUNT_ID_DEV }}:role/gha-oidc-role"
                  echo "Using dev account ID from variable: $aws_role"
                elif [ -n "${{ vars.AWS_ACCOUNT_ID }}" ]; then
                  aws_role="arn:aws:iam::${{ vars.AWS_ACCOUNT_ID }}:role/gha-oidc-role"
                  echo "Using generic account ID for dev: $aws_role"
                fi
                ;;
            esac
            
            if [ -n "$aws_role" ]; then
              echo "aws_role_arn=$aws_role" >> $GITHUB_OUTPUT
            else
              echo "No AWS account ID found for environment $environment - compliance check will run without AWS authentication"
              echo "aws_role_arn=" >> $GITHUB_OUTPUT
            fi
          fi
          
          # Set other defaults
          echo "policies_repo=${{ inputs.policies_repo || 'c-c-t/terraform-policies' }}" >> $GITHUB_OUTPUT
          echo "policies_ref=${{ inputs.policies_ref || 'main' }}" >> $GITHUB_OUTPUT
          echo "conftest_version=${{ inputs.conftest_version || '0.49.1' }}" >> $GITHUB_OUTPUT
          echo "terraform_version=${{ inputs.terraform_version || '1.11.3' }}" >> $GITHUB_OUTPUT
          echo "policy_namespaces=${{ inputs.policy_namespaces || 'terraform.module_requirements' }}" >> $GITHUB_OUTPUT
          echo "aws_region=${{ inputs.aws_region || 'us-east-1' }}" >> $GITHUB_OUTPUT
          
          # Set environment-specific S3 backend bucket
          case "$environment" in
            "prod")
              s3_bucket="cct-i24-terraform-state"
              ;;
            "test")
              s3_bucket="cct-i24-terraform-state-test"
              ;;
            "dev")
              s3_bucket="cct-i24-terraform-state-dev"
              ;;
            *)
              s3_bucket="cct-i24-terraform-state-dev"  # Default to dev
              ;;
          esac
          
          echo "s3_bucket=$s3_bucket" >> $GITHUB_OUTPUT
          echo "Using S3 backend bucket: $s3_bucket"
          
      - name: Checkout policies repository
        uses: actions/checkout@v4
        with:
          repository: ${{ steps.load-config.outputs.policies_repo }}
          ref: ${{ steps.load-config.outputs.policies_ref }}
          path: .conftest-policies
          token: ${{ secrets.TERRAFORM_POLICIES_TOKEN || inputs.TERRAFORM_POLICIES_TOKEN || github.token }}
          
      - name: Configure AWS Credentials
        if: ${{ steps.load-config.outputs.aws_role_arn != '' }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ steps.load-config.outputs.aws_role_arn }}
          aws-region: ${{ steps.load-config.outputs.aws_region }}
          role-session-name: TerraformCompliance
          
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ steps.load-config.outputs.terraform_version }}
          
      - name: Setup Conftest
        run: |
          wget https://github.com/open-policy-agent/conftest/releases/download/v${{ steps.load-config.outputs.conftest_version }}/conftest_${{ steps.load-config.outputs.conftest_version }}_Linux_x86_64.tar.gz
          tar xzf conftest_${{ steps.load-config.outputs.conftest_version }}_Linux_x86_64.tar.gz
          sudo mv conftest /usr/local/bin
          conftest --version
          
      - name: Terraform Init
        working-directory: ${{ steps.load-config.outputs.terraform_dir }}
        env:
          AWS_REGION: ${{ steps.load-config.outputs.aws_region }}
        run: |
          terraform init \
            -backend-config="bucket=${{ steps.load-config.outputs.s3_bucket }}" \
            -backend-config="region=us-east-1" \
            -backend-config="key=terraform.tfstate"
          terraform workspace select -or-create ${{ steps.load-config.outputs.terraform_dir }}
        
      - name: Generate Terraform Plan
        working-directory: ${{ steps.load-config.outputs.terraform_dir }}
        env:
          AWS_REGION: ${{ steps.load-config.outputs.aws_region }}
        run: |
          # Determine AWS account ID for the environment
          case "${{ steps.load-config.outputs.environment }}" in
            "prod")
              aws_account_id="${{ vars.AWS_ACCOUNT_ID_PROD || vars.AWS_ACCOUNT_ID }}"
              ;;
            "test")
              aws_account_id="${{ vars.AWS_ACCOUNT_ID_TEST || vars.AWS_ACCOUNT_ID }}"
              ;;
            "dev")
              aws_account_id="${{ vars.AWS_ACCOUNT_ID_DEV || vars.AWS_ACCOUNT_ID }}"
              ;;
            *)
              aws_account_id="${{ vars.AWS_ACCOUNT_ID_DEV || vars.AWS_ACCOUNT_ID }}"
              ;;
          esac
          
          # Generate terraform plan with environment-specific variables
          terraform plan -out=tfplan.binary \
            -var-file=variables/${{ steps.load-config.outputs.environment }}.tfvars \
            -var="environment=${{ steps.load-config.outputs.environment }}" \
            -var="aws_account=${aws_account_id}"
            
          terraform show -json tfplan.binary > tfplan.json
          
      - name: Run Conftest - Security Policies
        working-directory: ${{ steps.load-config.outputs.terraform_dir }}
        run: |
          echo "Available policy files:"
          find ../.conftest-policies -name "*.rego" -type f
          echo ""
          echo "Testing policy namespaces: ${{ steps.load-config.outputs.policy_namespaces }}"
          echo ""
          
          IFS=',' read -ra NAMESPACES <<< "${{ steps.load-config.outputs.policy_namespaces }}"
          for namespace in "${NAMESPACES[@]}"; do
            echo "Testing namespace: $namespace"
            conftest test tfplan.json \
              --policy ../.conftest-policies \
              --namespace "$namespace" \
              --output table
          done
          
      - name: Run Conftest - Generate Report
        working-directory: ${{ steps.load-config.outputs.terraform_dir }}
        run: |
          # Generate JSON report for programmatic processing
          conftest test tfplan.json \
            --policy ../.conftest-policies \
            --output json > conftest-report.json
            
          # Generate human-readable report
          conftest test tfplan.json \
            --policy ../.conftest-policies \
            --output table > conftest-report.txt
            
      - name: Upload Conftest Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: conftest-reports-${{ github.run_id }}
          path: |
            ${{ steps.load-config.outputs.terraform_dir }}/conftest-report.json
            ${{ steps.load-config.outputs.terraform_dir }}/conftest-report.txt
            ${{ steps.load-config.outputs.terraform_dir }}/tfplan.json
          retention-days: 30